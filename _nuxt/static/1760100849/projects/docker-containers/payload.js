__NUXT_JSONP__("/projects/docker-containers", {data:[{project:{slug:"docker-containers",title:"Docker Container",layout:"structured",sections:[{heading:"Introduction",content:"As a developer, I often experienced that a project ran smoothly on my machine – but as soon as someone else tried it, errors occurred. Different operating systems, missing libraries, or slightly different versions of dependencies make collaboration unnecessarily complicated. I wanted a solution that allows me to set up my application once and ensure it works the same everywhere. That's how I discovered Docker."},{heading:"The Problem",content:"The well-known phenomenon 'Works on my machine' describes the situation where an application works on my computer but not on my colleague's. Reasons include different operating systems, missing libraries, or incompatible versions. The result: long installation guides, frustration, and wasted time."},{heading:"The Idea: Containerization",content:"Instead of configuring each system individually, Docker encapsulates an application in a container. This container contains everything the app needs: source code, libraries, dependencies, and runtime environment. This ensures that the application runs the same everywhere – whether on my laptop, my colleague's machine, or a server."},{heading:"The Solution: My First Container",content:"- \u003Cb\u003EInstall Docker:\u003C\u002Fb\u003E First, I installed Docker. The official website provides installers for Windows, Mac, and Linux.\n\n- \u003Cb\u003ECreate a simple image:\u003C\u002Fb\u003E I created a file named `Dockerfile`:\n\n```\nFROM node:18\nWORKDIR \u002Fapp\nCOPY . .\nRUN npm install\nCMD [\"node\", \"index.js\"]\n```\n\nThis tells Docker to use a Node.js image, copy the code in, install dependencies, and start the app.\n\n- \u003Cb\u003EStart the container:\u003C\u002Fb\u003E\n\n```\ndocker build -t my-app .\ndocker run -p 3000:3000 my-app\n```\n\nAfter a few seconds, my app was running in the browser – independent of my local system."},{heading:"Result",content:"The difference was immediately noticeable: no more long installation instructions. My colleagues could start the container and use the app right away. The setup no longer took hours, just a few minutes. It was also convenient for me because I could easily delete old containers and start a clean environment anytime."},{heading:"Conclusion",content:"Docker has shown me the value of containerization in development. Instead of dealing with environment issues, I could focus on the actual code. My next step is to learn how to connect and orchestrate multiple containers – which naturally leads to Kubernetes, my next topic."}]}}],fetch:{},mutations:void 0});