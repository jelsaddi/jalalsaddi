__NUXT_JSONP__("/de/projects/docker-containers", {data:[{project:{slug:"docker-containers",title:"Mein erster Docker-Container",layout:"structured",sections:[{heading:"Einleitung",content:"Als Entwickler habe ich oft erlebt, dass ein Projekt auf meinem Rechner problemlos läuft – aber sobald jemand anderes es ausprobiert, treten Fehler auf. Unterschiedliche Betriebssysteme, fehlende Bibliotheken oder leicht andere Versionen von Abhängigkeiten machen die Zusammenarbeit unnötig kompliziert. Ich wollte eine Lösung, mit der ich meine Anwendung einmal einrichte und sicherstellen kann, dass sie überall gleich funktioniert. So bin ich auf Docker gestoßen."},{heading:"Das Problem",content:"Das bekannte Phänomen „Works on my machine“ beschreibt die Situation, dass eine Anwendung bei mir funktioniert, aber bei meinem Kollegen nicht. Gründe dafür sind unterschiedliche Betriebssysteme, fehlende Bibliotheken oder inkompatible Versionen. Die Folge: lange Installationsanleitungen, Frust und Zeitverlust."},{heading:"Die Idee: Containerisierung",content:"Anstatt jedes System einzeln zu konfigurieren, kapselt Docker eine Anwendung in einem Container. Dieser Container enthält alles, was die App benötigt: Quellcode, Bibliotheken, Abhängigkeiten und Laufzeitumgebung. Damit läuft die Anwendung überall gleich – egal, ob auf meinem Laptop, dem Rechner meines Kollegen oder auf einem Server."},{heading:"Die Lösung: Mein erster Container",content:"1. **Docker installieren:** Zuerst habe ich Docker installiert. Auf der offiziellen Website gibt es Installer für Windows, Mac und Linux.\n\n2. **Ein einfaches Image erstellen:** Ich habe eine Datei namens `Dockerfile` erstellt:\n\n```\nFROM node:18\nWORKDIR \u002Fapp\nCOPY . .\nRUN npm install\nCMD [\"node\", \"index.js\"]\n```\n\nDamit sage ich: Verwende ein Node.js-Image, kopiere den Code hinein, installiere die Abhängigkeiten und starte die App.\n\n3. **Container starten:**\n\n```\ndocker build -t meine-app .\ndocker run -p 3000:3000 meine-app\n```\n\nNach wenigen Sekunden lief meine App im Browser – unabhängig von meinem lokalen System."},{heading:"Ergebnis",content:"Der Unterschied war sofort spürbar: keine langen Installationsanleitungen mehr. Meine Kollegen konnten den Container starten und die App sofort nutzen. Die Einrichtung dauerte nicht mehr Stunden, sondern nur wenige Minuten. Auch für mich war es praktisch, weil ich alte Container einfach löschen und jederzeit eine saubere Umgebung starten konnte."},{heading:"Fazit",content:"Docker hat mir gezeigt, wie wertvoll Containerisierung in der Entwicklung ist. Anstatt mich mit Umgebungsproblemen zu beschäftigen, konnte ich mich wieder auf den eigentlichen Code konzentrieren. Der nächste Schritt für mich ist, zu lernen, wie man mehrere Container verbindet und orchestriert – was mich direkt zu Kubernetes führt, meinem nächsten Thema."}]}}],fetch:{},mutations:void 0});