__NUXT_JSONP__("/projects/hexagonal-architecture-in-practice", (function(a,b,c,d,e,f,g,h,i,j){return {data:[{project:{slug:"hexagonal-architecture-in-practice",title:d,layout:"textlayout",sections:[{heading:d,content:"After 15 years in software development, I had an aha moment last week. I read about Hexagonal Architecture, Ports & Adapters, Clean Architecture – and suddenly I realized: \u003Cb\u003EWe were already doing this 15 years ago. Just with different names.\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003EThe frameworks have changed. The buzzwords are new. But the principles? They have stayed the same.\u003Cbr\u003E\u003Cbr\u003EThis insight fundamentally changed my perspective on modern software architecture – and it shows something important: \u003Cb\u003ETechnology keeps changing, but the principles barely move.\u003C\u002Fb\u003E"},{heading:"The Context: Where Did I Come From?",content:a},{heading:"15 Years Ago: The 'Old' Java World",content:"When I started programming, the Java enterprise stack was very different:"},{bullets:["Struts as web framework","Spring for dependency injection (but still with XML configuration)","iBatis (later MyBatis) for database access","JSP for views","Deployment as WAR files on Tomcat or JBoss"]},{content:"That was the standard. That’s what we learned. That was considered \"professional\"."},{heading:"How We Built Architectures Back Then",content:"We thought in layers:\n\n```\nPresentation Layer\n  (Struts Actions, JSPs)\n        ↓\nBusiness Logic Layer\n  (Service Classes)\n        ↓\nData Access Layer\n  (DAO Interfaces, iBatis)\n        ↓\nDatabase\n```\n"},{content:"\u003Cb\u003EOur principles were clear:\u003C\u002Fb\u003E"},{bullets:["\u003Cb\u003ESeparation of Concerns:\u003C\u002Fb\u003E Each layer has a responsibility","\u003Cb\u003EInterfaces everywhere:\u003C\u002Fb\u003E DAOs were always interfaces","\u003Cb\u003EBusiness logic independent:\u003C\u002Fb\u003E Service layer knew nothing about HTTP details","\u003Cb\u003ETestable:\u003C\u002Fb\u003E Unit tests for services, mock DAOs for tests"]},{content:"That was our \"best practice\" – long before anyone talked about Hexagonal Architecture."},{heading:"The Problem: Technology Changes",content:a},{heading:"Years Passed, New Frameworks Arrived",content:"Over the years, the stack changed dramatically:\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003E2010s:\u003C\u002Fb\u003E"},{bullets:["Struts → Spring MVC","XML → Annotations","WAR → Embedded Tomcat"]},{content:"\u003Cb\u003E2020s:\u003C\u002Fb\u003E"},{bullets:["Spring Boot as standard","Microservices architectures","Containers (Docker, Kubernetes)","REST APIs instead of JSPs"]},{content:"\u003Cb\u003EAnd suddenly, new buzzwords:\u003C\u002Fb\u003E"},{bullets:[e,"Ports & Adapters","Clean Architecture",f]},{heading:"The Uncertainty",content:"When I heard these new terms, I first thought:\u003Cbr\u003E\u003Cbr\u003E\"Is our old architecture outdated? Did we do it wrong? Do we need to relearn everything?\"\u003Cbr\u003E\u003Cbr\u003EConferences full of talks about \"modern architecture.\" Books about Clean Code and Domain-Driven Design. YouTube videos about Hexagonal Architecture.\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003EThe implicit message:\u003C\u002Fb\u003E \"The old is bad, the new is better.\""},{heading:"The Solution: Looking Behind the Buzzwords",content:a},{heading:"The Aha Moment",content:"Last week, I sat with a colleague and we discussed Hexagonal Architecture. He showed me a diagram:\n\n```\nREST Controller (Adapter)\n        ↓\nApplication Service (Port)\n        ↓\nDomain Logic (Core)\n        ↓\nRepository Interface (Port)\n        ↓\nRepository Impl (Adapter)\n```\n\nI looked at it – and my jaw dropped.\n\n\u003Cb\u003EThis is exactly what we were doing 15 years ago!\u003C\u002Fb\u003E"},{heading:"The Comparison: Then vs. Now",columns:{damals:"Then (2010)",heute:"Now (2025)",category:"The Principle"},comparison:[{category:"Input interface to the outside world",damals:"Struts Action",heute:"REST Controller (Adapter)"},{category:"Business logic abstraction",damals:"Service Interface + Impl",heute:"Application Service (Port)"},{category:"Concrete business operations",damals:"Service methods",heute:"Use Cases"},{category:"Persistence abstraction",damals:"DAO Interface",heute:"Repository Port"},{category:"Concrete database connection",damals:"iBatis Mapper",heute:"Repository Adapter"}]},{content:"\u003Cb\u003EIt’s the same. Only the names have changed.\u003C\u002Fb\u003E"},{heading:"What’s Really New (and What Isn’t)",content:"\u003Cb\u003EReally new:\u003C\u002Fb\u003E"},{bullets:["✅ Syntax: @RestController instead of XML configuration","✅ Tools: Spring Boot vs. Struts + XML","✅ Deployment: Containers vs. WAR files","✅ Terminology: \"Ports & Adapters\" vs. \"DAOs\""]},{content:"\u003Cb\u003ENOT new:\u003C\u002Fb\u003E"},{bullets:["❌ Separation of Concerns","❌ Dependency Inversion","❌ Abstraction via interfaces","❌ Testability through mocking","❌ Loose coupling between layers"]},{content:"\u003Cb\u003EThe principles are identical. Only the packaging is more modern.\u003C\u002Fb\u003E"},{heading:"1. Separation of Concerns has worked for decades",content:b,codeSnippets:["\u002F\u002F Struts Action (2010)\npublic class UserAction extends Action {\n    private UserService userService; \u002F\u002F injected\n    public ActionForward execute(...) {\n        User user = userService.findById(id);\n        request.setAttribute(\"user\", user);\n        return mapping.findForward(\"success\");\n    }\n}"],contentAfterCode:a},{content:c,codeSnippets:["\u002F\u002F REST Controller (2025)\n@RestController\npublic class UserController {\n    private final UserService userService;\n    @GetMapping(\"\u002Fusers\u002F{id}\")\n    public User getUser(@PathVariable Long id) {\n        return userService.findById(id);\n    }\n}"],contentAfterCode:"\u003Cb\u003EDifference:\u003C\u002Fb\u003E Syntax. Principle: The same – Controller delegates to Service."},{heading:"2. Dependency Inversion has always been smart",content:b,codeSnippets:["\u002F\u002F Service Layer (2010)\npublic class UserServiceImpl implements UserService {\n    private UserDAO userDAO; \u002F\u002F Interface!\n    public User findById(Long id) {\n        return userDAO.findById(id);\n    }\n}"],contentAfterCode:a},{content:c,codeSnippets:["\u002F\u002F Application Service (2025)\n@Service\npublic class UserService {\n    private final UserRepository userRepository; \u002F\u002F Interface!\n    public User findById(Long id) {\n        return userRepository.findById(id);\n    }\n}"],contentAfterCode:"\u003Cb\u003EDifference:\u003C\u002Fb\u003E Annotation. \u003Cb\u003EPrinciple:\u003C\u002Fb\u003E The same – depends on abstraction, not implementation."},{heading:"3. Testability through interfaces was always important",content:b,codeSnippets:["\u002F\u002F Unit Test (2010)\npublic class UserServiceTest {\n    @Test\n    public void testFindById() {\n        UserDAO mockDAO = mock(UserDAO.class);\n        when(mockDAO.findById(1L)).thenReturn(testUser);\n        UserService service = new UserServiceImpl(mockDAO);\n        User result = service.findById(1L);\n        assertEquals(\"John\", result.getName());\n    }\n}"],contentAfterCode:a},{content:c,codeSnippets:["\u002F\u002F Unit Test (2025)\n@Test\npublic void testFindById() {\n    UserRepository mockRepo = mock(UserRepository.class);\n    when(mockRepo.findById(1L)).thenReturn(Optional.of(testUser));\n    UserService service = new UserService(mockRepo);\n    User result = service.findById(1L);\n    assertEquals(\"John\", result.getName());\n}"],contentAfterCode:"\u003Cb\u003EDifference:\u003C\u002Fb\u003E Minimal. \u003Cb\u003EPrinciple:\u003C\u002Fb\u003E Exactly the same – mock the dependency, test the logic."},{heading:"The Insight",content:"\u003Cb\u003EWe did not build bad architecture.\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003EWe applied \u003Cb\u003Esolid principles\u003C\u002Fb\u003E:"},{bullets:["Loose Coupling","Dependency Inversion","Separation of Concerns","Testability"]},{content:"The industry just \u003Cb\u003Erepackaged and renamed\u003C\u002Fb\u003E these principles:"},{bullets:["\"DAO\" → \"Repository\"","\"Service Layer\" → \"Application Service\" \u002F \"Use Case\"","\"Layered Architecture\" → \"Hexagonal Architecture\" \u002F \"Clean Architecture\""]},{content:"\u003Cb\u003EThe principles were always there. We just found new words for them.\u003C\u002Fb\u003E"},{heading:"2. Principles matter more than names",content:"\u003Cb\u003EThe mistake:\u003C\u002Fb\u003E Spend hours discussing: \"Is this a Port or an Adapter?\"\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003EThe reality:\u003C\u002Fb\u003E The question should be: \"Is this component testable? Is it decoupled? Is it maintainable?\"\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003ENames are communication tools, not dogmas.\u003C\u002Fb\u003E"},{heading:"3. Distinguishing hype from substance",content:"\u003Cb\u003EFrameworks come and go:\u003C\u002Fb\u003E"},{bullets:["Struts (dead)","JSF (almost dead)","Spring MVC (standard, but decreasing)","React (current hype)","Next.js (even newer hype)"]},{content:"Principles remain:"},{bullets:["SOLID (since 2000, still valid)","Separation of Concerns (since the 1970s)","Dependency Inversion (always)","Testability (always)"]},{content:"\u003Cb\u003EInvest in principles, not in hype.\u003C\u002Fb\u003E"},{heading:"4. Old codebases are not automatically bad",content:"\u003Cb\u003EThe mistake:\u003C\u002Fb\u003E \"This code is 10 years old, it must be bad!\"\u003Cbr\u003E\u003Cbr\u003E"},{content:"\u003Cb\u003EThe reality:\u003C\u002Fb\u003E If the code is cleanly structured, testable, and works – then it is \u003Cb\u003Egood\u003C\u002Fb\u003E, no matter its age.\u003Cbr\u003E\u003Cbr\u003E"},{content:"\u003Cb\u003EAge ≠ Quality. Structure = Quality.\u003C\u002Fb\u003E"},{heading:"Learnings: What I really took away"},{heading:"1. Frameworks are tools, principles are foundations",content:"\u003Cb\u003EAs a junior (15 years ago):\u003C\u002Fb\u003E I thought: \"Struts is THE way to build web applications.\"\u003Cbr\u003E\u003Cbr\u003E"},{content:"\u003Cb\u003EAs a senior (today):\u003C\u002Fb\u003E I know: \"Struts was ONE tool that helped me apply good principles.\"\u003Cbr\u003E\u003Cbr\u003E"},{content:"\u003Cb\u003EThe lesson:\u003C\u002Fb\u003E If you understand the principles (Separation, Decoupling, Testability), you can learn \u003Cb\u003Eany framework.\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003EIf you only memorize frameworks, you are lost when a new one comes."},{heading:"2. \"Modern\" is relative",content:"\u003Cb\u003EModern today:\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003E"},{bullets:[e,f,"Microservices","Serverless"]},{content:"\u003Cb\u003EIn 10 years:\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003E"},{bullets:["New buzzwords will exist","Today’s \"modern\" frameworks will be legacy","The same principles will still apply"]},{content:"\u003Cb\u003EThe lesson:\u003C\u002Fb\u003E Don’t chase trends. Understand principles."},{heading:"3. Experience means recognizing patterns",content:"\u003Cb\u003EThis is the difference between junior and senior:\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003EJunior:\u003C\u002Fb\u003E \"Hexagonal Architecture is new, I must learn it!\"\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003ESenior:\u003C\u002Fb\u003E \"Hexagonal Architecture? That’s like the DAO pattern with a new name.\"\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003EThe lesson:\u003C\u002Fb\u003E With experience you see that much repeats – just with different words.\u003Cbr\u003E\u003Cbr\u003E"},{heading:"4. Good architecture is timeless",content:"\u003Cb\u003ECriteria for good architecture (2010):\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003E"},{bullets:[g,h,i,j]},{content:"\u003Cb\u003ECriteria for good architecture (2025):\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003E"},{bullets:[g,h,i,j]},{content:"\u003Cb\u003EThe lesson:\u003C\u002Fb\u003E These criteria have \u003Cb\u003Enot changed.\u003C\u002Fb\u003E And they will not change in 10 years.\u003Cbr\u003E\u003Cbr\u003E"},{heading:"5. Humility towards the past",content:"\u003Cb\u003EEarlier I thought:\u003C\u002Fb\u003E \"The old developers didn’t understand it. We are doing it better today.\"\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003EToday I know:\u003C\u002Fb\u003E \"The old developers understood the same principles. They just had different tools.\"\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003EThe lesson:\u003C\u002Fb\u003E Respect the work of previous developers. They often did \u003Cb\u003Every well\u003C\u002Fb\u003E – just with different means.\u003Cbr\u003E\u003Cbr\u003E"},{heading:"Looking forward"},{heading:"What does this mean for my work?",content:"This insight fundamentally changed my perspective:\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003EI no longer ask:\u003C\u002Fb\u003E \"Is this framework modern?\"\u003Cbr\u003E\u003Cb\u003EI ask:\u003C\u002Fb\u003E \"Does this framework help me implement good principles?\"\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003EI no longer ask:\u003C\u002Fb\u003E \"Do we need to migrate to Hexagonal Architecture?\"\u003Cbr\u003E\u003Cb\u003EI ask:\u003C\u002Fb\u003E \"Is our architecture testable, maintainable, and decoupled?\"\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003EI don’t fall for hype anymore.\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cb\u003EI focus on timeless principles.\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003E"},{heading:"What do I recommend to others?"},{content:"\u003Cb\u003EFor junior developers:\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003E"},{bullets:["❌ \u003Cb\u003ENot:\u003C\u002Fb\u003E \"Memorize Hexagonal Architecture\"","✅ \u003Cb\u003EBetter:\u003C\u002Fb\u003E \"Understand WHY we separate layers and invert dependencies\"","❌ \u003Cb\u003ENot:\u003C\u002Fb\u003E \"Spring Boot is THE solution\"","✅ \u003Cb\u003EBetter:\u003C\u002Fb\u003E \"Spring Boot is ONE tool that implements principles\""]},{content:"\u003Cb\u003EIf you understand the principles:\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003E"},{bullets:["You can learn any framework","You can recognize good vs. bad architecture","You are not dependent on trends"]},{content:"\u003Cb\u003EFor senior developers:\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003E"},{bullets:["❌ \u003Cb\u003ENot:\u003C\u002Fb\u003E \"Our old architecture is outdated\"","✅ \u003Cb\u003EBetter:\u003C\u002Fb\u003E \"Our architecture follows solid principles – that counts\"","❌ \u003Cb\u003ENot:\u003C\u002Fb\u003E \"We must refactor to Hexagonal\"","✅ \u003Cb\u003EBetter:\u003C\u002Fb\u003E \"Do we have a problem that Hexagonal would solve?\""]},{content:"\u003Cb\u003ERefactor only with a clear reason, not because of buzzwords.\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003E"},{heading:"In 15 years"},{content:"\u003Cb\u003EWhat will change:\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003E"},{bullets:["Spring Boot may become legacy","New frameworks will exist","New buzzwords will fill conferences","New annotations will be invented"]},{content:"\u003Cb\u003EWhat will stay the same:\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003E"},{bullets:["Separation of Concerns will remain important","Testability will matter","Loose Coupling will still apply","Dependency Inversion will work"]},{content:"\u003Cb\u003EAs a wise developer once said:\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003E\"Technology keeps changing, but the principles barely move.\"\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003EOr even more concisely:\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003E\"Nothing's really new. It just gets a new name, a new annotation, and a new conference talk.\""},{heading:"Conclusion: Principles over frameworks"},{content:"After 15 years in software development, this is my most important insight:\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003EFrameworks are temporary. Principles are eternal.\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003EStruts is dead. iBatis renamed. XML configuration is out.\u003Cbr\u003E\u003Cbr\u003EBut Separation of Concerns? Dependency Inversion? Testability?\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003EThey will still matter in 50 years.\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003EThis is not nostalgia. This is not resistance to new things.\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003EIt is wisdom from experience:\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003EThe best developers are not those who follow every new trend.\u003Cbr\u003EThe best developers are those who understand \u003Cb\u003Ewhat really matters beneath the surface.\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003EAnd that is not frameworks.\u003Cbr\u003E\u003Cb\u003EThat is principles.\u003C\u002Fb\u003E"}]}}],fetch:{},mutations:void 0}}("","\u003Cb\u003EBack then:\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003E","\u003Cb\u003EToday:\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003E","Hexagonal Architecture in Practice: Why Less Changes Than You Think","Hexagonal Architecture","Domain-Driven Design","Testable","Maintainable","Extensible","Decoupled")));