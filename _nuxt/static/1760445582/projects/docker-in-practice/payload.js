__NUXT_JSONP__("/projects/docker-in-practice", (function(a){return {data:[{project:{slug:"docker-in-practice",title:a,layout:"textlayout",sections:[{heading:a,content:"After many years in software development, I've learned: The most interesting projects aren't the ones where everything is perfect and modern. They're the ones where you have to deal with reality – with evolved systems, legacy code, and the challenge of connecting old and new.\n\nThis is exactly the world I've been working in for years. And this is where Docker shows its true strength."},{heading:"The Starting Point: An Evolved Infrastructure",content:"A few years ago, our development landscape still looked traditional:"},{bullets:["\u003Cb\u003EJenkins\u003C\u002Fb\u003E as build and deployment tool","Manual setups for development environments","Oracle databases configured differently on each developer's machine","Deployments that worked – but often only after several attempts"]},{content:"That wasn't bad. It worked. But it was time-consuming."},{heading:"The First Docker Experiment: Oracle DB",content:"Our first encounter with Docker was pragmatic: \u003Cb\u003EOracle database for development.\u003C\u002Fb\u003E\n\nPreviously, Oracle setup meant:"},{bullets:["2-3 hours of installation and configuration","Different versions on different machines","\"Works on my machine\" – but not on my colleague's"]},{content:"With Docker:\n\n```\ndocker run oracle-db\n```\n\n10 minutes. Same version everywhere. Reproducible.\n\n\u003Cb\u003EThat was the moment I understood: Docker doesn't primarily solve technical problems. It solves human problems.\u003C\u002Fb\u003E\n\nNew developers were productive instead of frustrated. Seniors no longer wasted time on setup support. That alone justified the effort."},{heading:"The Turning Point: Azure CI\u002FCD and a Complex E-Commerce Architecture",content:"Then came the big step: Migration to Azure DevOps with a fully container-based CI\u002FCD pipeline – and simultaneously the integration of an established e-commerce platform through a development partner."},{heading:"The Challenge: Hybrid Architecture",content:"Large e-commerce platforms have evolved over years. That also means: \u003Cb\u003ELegacy is reality.\u003C\u002Fb\u003E\n\nOur architecture today:"},{bullets:["\u003Cb\u003EAn established commerce platform\u003C\u002Fb\u003E – proven, but with older technologies","\u003Cb\u003EPWA Storefront\u003C\u002Fb\u003E – modern Angular-based Progressive Web App","\u003Cb\u003EModern Microservices\u003C\u002Fb\u003E – Offer Service, Merchant Service, Product Service","\u003Cb\u003ESPA-based Admin Portal\u003C\u002Fb\u003E – completely modern development"]},{content:"The interesting part: The PWA looks modern, runs on a modern stack – but still works with the legacy platform in the background. Certain functions like checkout or complex account management are delegated to the established system.\n\n\u003Cb\u003EThis is enterprise reality:\u003C\u002Fb\u003E Not everything can be rewritten overnight. You have to work with what's there."},{heading:"What Docker Solves Here Specifically",content:""},{heading:"1. Service Isolation Despite Heterogeneous Technologies",content:"We have services on different tech stacks:"},{bullets:["Legacy platform (Java-based, older frameworks)","Modern backend services (current Java versions, modern architectures)","Frontend (Angular PWA, Node.js-based)"]},{content:"Without Docker, every developer would have to install and maintain all these environments locally. With Docker, each service runs in its own container with exactly the dependencies it needs.\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003EResult:\u003C\u002Fb\u003E A developer can work on the frontend without having Java installed. A backend developer can test different service versions in parallel."},{heading:"2. CI\u002FCD Pipeline Becomes Consistent and Fast",content:"The switch from Jenkins to Azure DevOps with Docker brought measurable improvements."},{content:"\u003Cb\u003EBefore (Jenkins):\u003C\u002Fb\u003E"},{bullets:["Build time: 15-25 minutes (depending on service)","Deployment: manual, error-prone","Differences between build environment and production"]},{content:"\u003Cb\u003ENow (Azure + Docker + Helm):\u003C\u002Fb\u003E"},{bullets:["Build time: 8-12 minutes for most services","Deployment: automated via Helm Charts","Identical containers from dev to production"]},{content:"The modern services – Offer Service, Merchant Service, Product Service – run particularly well. They were designed for containers from the start. Short build times, clear dependencies, clean isolation."},{heading:"3. Helm Charts: Deployment Becomes Declarative",content:"Helm Charts revolutionized deployment. Instead of manual configuration, a YAML file describes the entire deployment:\n\n```yaml\nservice: offer-service\nversion: 1.2.3\nreplicas: 3\nresources: ...\n```\n\nA deployment across multiple environments (Dev, Staging, Production) becomes:"},{bullets:["Traceable (everything is versioned in Git)","Repeatable (same command, same result)","Safe (rollback possible with one command)"]},{heading:"4. The Legacy Bridge: Old and New Coexist",content:"Here Docker's true strength shows: \u003Cb\u003EIt enables coexistence.\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003EThe legacy platform runs in its containers with its specific requirements. The modern services run in their containers with modern stacks. The PWA communicates with both – transparently through Docker networking.\n\nWe don't have to rewrite the old platform. We can gradually replace it with modern services – service by service. Docker makes this evolutionary approach practical."},{heading:"What You Need to Learn (The Critical Points)",content:"After years with Docker in this complex environment, I've also learned: \u003Cb\u003EIt's not a silver bullet.\u003C\u002Fb\u003E"},{heading:"1. Performance Differences Are Real",content:"The modern services build quickly and run performantly. But some older services or components are slower.\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003EWhy?\u003C\u002Fb\u003E"},{bullets:["Large images (sometimes 1-2 GB)","Complex build processes","Many dependencies"]},{content:"\u003Cb\u003ELesson:\u003C\u002Fb\u003E Docker doesn't make slow software fast. It just makes it reproducibly slow."},{heading:"2. Debugging Becomes More Complex",content:"When a service doesn't work in a container, debugging is more difficult:"},{bullets:["Logs are distributed across multiple containers","Network issues between containers are subtle","Accessing running containers requires additional steps"]},{content:"\u003Cb\u003ESolution:\u003C\u002Fb\u003E Good logging and monitoring aren't optional. They're critical."},{heading:"3. Image Management Requires Discipline",content:"With Azure Container Registry and many services, we have hundreds of images. Without clear versioning and cleanup strategy, it quickly becomes confusing.\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003ELearnings:\u003C\u002Fb\u003E"},{bullets:["Use semantic versioning consistently","Delete old images regularly","Automate security scans"]},{heading:"4. Not Everything Belongs in Containers",content:"I've also learned: Some components run better outside of containers. Especially with I\u002FO-intensive operations or when external tools need to be integrated.\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003EThe question isn't:\u003C\u002Fb\u003E \"Can I dockerize this?\"\u003Cbr\u003E\u003Cb\u003EThe question is:\u003C\u002Fb\u003E \"Should I dockerize this?\""},{heading:"What I Really Learned",content:"After years in this hybrid world between legacy and modern microservices, my most important insight is:\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003EDocker is an enabler for gradual transformation.\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003EIt allows us to:"},{bullets:["Keep old systems alive while we build new ones","Run different technologies in parallel","Develop and deploy services independently","Let teams work autonomously"]},{content:"But it doesn't replace:"},{bullets:["Good architecture decisions","Clear documentation","Understanding of your own systems","Disciplined development processes"]},{content:"The teams that succeed with Docker have understood: \u003Cb\u003EDocker is a tool, not an end in itself.\u003C\u002Fb\u003E"},{heading:"When Does Docker Make Sense?",content:"Based on this experience, I would recommend Docker for:"},{bullets:["✓ Microservices architectures – Each service in its container, clear boundaries, independent deployments.","✓ Hybrid environments (Legacy + Modern) – Enables gradual migration without big-bang rewrite.","✓ Teams with multiple developers – Uniform development environments save enormous amounts of time.","✓ CI\u002FCD pipelines – Build once, run anywhere – from local testing to production.","✓ Cloud deployments – Almost all cloud platforms support containers natively."]},{content:"But be careful with:"},{bullets:["✗ Very simple projects – A static website doesn't need container overhead.","✗ Teams without Docker experience under time pressure – The learning curve is real. Better take time or work classically first.","✗ Legacy monoliths without clear modularization – Putting a monolith in a container doesn't solve architecture problems.","✗ Performance-critical applications with high I\u002FO – Container overhead can be noticeable here."]},{heading:"Looking Forward",content:"These years with Docker in a complex enterprise environment have shaped my perspective on software development.\u003Cbr\u003E\u003Cbr\u003EI've learned:\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003ETechnology must solve problems, not create them.\u003C\u002Fb\u003E\u003Cbr\u003EDocker solves real problems – when used correctly.\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003EPragmatism beats purism.\u003C\u002Fb\u003E\u003Cbr\u003EThe perfect architecture on paper is useless. The hybrid solution that works is better.\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003EEvolution beats revolution.\u003C\u002Fb\u003E\u003Cbr\u003EComplete rewrites are often not possible. But gradual replacement works.\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003ETeams are more important than tools.\u003C\u002Fb\u003E\u003Cbr\u003EDocker is only as good as the team using it. Without shared understanding, clear standards, and discipline, even Docker becomes a problem."},{heading:"What This Means for Me",content:"This experience – between legacy and modern microservices, between old and new technologies – has shown me what software development is really about:\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003ENot using the coolest technology, but the right one.\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003ENot rebuilding everything, but \u003Cb\u003Eworking smart with what's there.\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003ENot striving for perfection, but \u003Cb\u003Econtinuous improvement.\u003C\u002Fb\u003E\u003Cbr\u003E\u003Cbr\u003EThis is the mindset I bring to future projects.\u003Cbr\u003E\u003Cbr\u003EBecause in the end, it's not about containers, microservices, or CI\u002FCD pipelines.\u003Cbr\u003E\u003Cbr\u003E\u003Cb\u003EIt's about building software that solves real problems – pragmatically, sustainably, and with value for the people who work with it.\u003C\u002Fb\u003E"}]}}],fetch:{},mutations:void 0}}("Docker in Practice: From Legacy to Modern Microservices")));